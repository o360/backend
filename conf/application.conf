# endpoints prefix
play.http.context = "/api/v1.0"

# Application secret
play.http.secret.key = ${?APPLICATION_SECRET}

# Secret key used for events results exporting
export.secret = ${?EXPORT_SECRET}

# Filters
play.http.filters = "utils.Filters"

# Error handler
play.http.errorHandler = "utils.ErrorHandler"

# Slick configuration
slick {
  dbs {
    default {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        driver = "org.postgresql.Driver"
        url = ${?DATABASE_URL}
        user = ${?DATABASE_USER}
        password = ${?DATABASE_PASSWORD}
      }
    }
  }
}

# The FlywayDb DI module
play.modules.enabled += "utils.FlywayModule"

# The Silhouette DI module
play.modules.enabled += "silhouette.SilhouetteModule"

# Custom error handler is used
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"

# authentication settings
auth {
  externalServerURL = ${?EXTERNAL_AUTH_SERVER_URL}
  # silhouette settings
  silhouette {
  # google OAuth configuration
    google {
      accessTokenURL = "https://accounts.google.com/o/oauth2/token"
      redirectURL = ${?GOOGLE_REDIRECT_URL}
      clientID = ${?GOOGLE_CLIENT_ID}
      clientSecret = ${?GOOGLE_CLIENT_SECRET}
      scope = "profile email"
    }
    twitter {
      requestTokenURL = "https://twitter.com/oauth/request_token"
      accessTokenURL = "https://twitter.com/oauth/access_token"
      authorizationURL = "https://twitter.com/oauth/authenticate"
      callbackURL = ${?TWITTER_CALLBACK_URL}
      consumerKey = ${?TWITTER_CONSUMER_KEY}
      consumerSecret = ${?TWITTER_CONSUMER_SECRET}
    }
    facebook {
      accessTokenURL = "https://graph.facebook.com/oauth/access_token"
      redirectURL = ${?FACEBOOK_REDIRECT_URL}
      clientID = ${?FACEBOOK_CLIENT_ID}
      clientSecret = ${?FACEBOOK_CLIENT_SECRET}
      scope = "email user_gender"
    }
    vk {
      accessTokenURL = "https://oauth.vk.com/access_token"
      redirectURL = ${?VK_REDIRECT_URL}
      clientID = ${?VK_CLIENT_ID}
      clientSecret = ${?VK_CLIENT_SECRET}
      scope = "email"
      apiURL = "https://api.vk.com/method/users.get?fields=id,first_name,last_name,sex,photo_max_orig&v=5.73&access_token=%s"
    }
  }
}

# Mailer settings
play.mailer {
  host = localhost
  host = ${?MAIL_HOST}
  port = 25
  port = ${?MAIL_PORT}
  user = ${?MAIL_USER}
  password = ${?MAIL_PASSWORD}
  from = ${?MAIL_SEND_FROM}
  ssl = no
  tls = no
  debug = no
  timeout = 60000
  connectiontimeout = 60000
  mock = no
}

# Scheduler DI module
play.modules.enabled += "scheduler.SchedulerModule"

# Scheduler settings
scheduler {

  # Is scheduler enabled
  enabled = ${?SCHEDULER_ENABLED}

  # Triggering interval
  interval = 10 seconds

  # Max job age to execute
  max-age = 6 hours
}

contexts {
  db-write {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 4
    }
  }
}

userFilesPath = "uploads/"
play.http.parser.maxDiskBuffer = 50m

# For it to work in docker. See
# https://github.com/lightbend/sbt-reactive-app/issues/177
# https://stackoverflow.com/questions/56153102/why-is-my-docker-image-of-my-play-framework-for-scala-app-not-starting-with-an-a
play.server.pidfile.path=/dev/null
